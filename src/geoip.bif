
%%{
RecordType* geo_location = internal_type("geo_location")->AsRecordType();

extern "C" {
#include <GeoIPCity.h>
}

static GeoIP* open_geoip_db(GeoIPDBTypes type)
	{
	GeoIP* geoip = 0;

	if ( GeoIP_db_avail(type) )
		geoip = GeoIP_open_type(type, GEOIP_MEMORY_CACHE);

	return geoip;
	}

static GeoIP* open_geoip_city_db()
	{
	GeoIP* geoip = open_geoip_db(GEOIP_CITY_EDITION_REV0);

	if ( ! geoip )
		geoip = open_geoip_db(GEOIP_CITY_EDITION_REV1);

	if ( ! geoip )
		{
		string rev0_path = GeoIPDBFileName[GEOIP_CITY_EDITION_REV0];
		string rev1_path = GeoIPDBFileName[GEOIP_CITY_EDITION_REV1];
		string db_path = rev0_path;

		// Maybe in the future the revisions won't share a common default path.
		if ( rev0_path != rev1_path )
			db_path = rev0_path + " or " + rev1_path;

		reporter->Info("Failed to open GeoIP City database: %s",
		               db_path.c_str());
		}

	return geoip;
	}

static GeoIP* open_geoip_city_db_v6()
	{
	GeoIP* geoip = 0;

	// Both city edition revisions for IPv6 show up in libGeoIP 1.4.7.
#ifdef HAVE_GEOIP_CITY_EDITION_REV0_V6
	geoip = open_geoip_db(GEOIP_CITY_EDITION_REV0_V6);

	if ( ! geoip )
		geoip = open_geoip_db(GEOIP_CITY_EDITION_REV1_V6);

	if ( ! geoip )
		{
		string rev0_path = GeoIPDBFileName[GEOIP_CITY_EDITION_REV0_V6];
		string rev1_path = GeoIPDBFileName[GEOIP_CITY_EDITION_REV1_V6];
		string db_path = rev0_path;

		// Maybe in the future the revisions won't share a common default path.
		if ( rev0_path != rev1_path )
			db_path = rev0_path + " or " + rev1_path;

		reporter->Info("Failed to open GeoIP Cityv6 database: %s",
		               db_path.c_str());
		}
#endif

	return geoip;
	}

%%}

## Performs a geo-lookup of an IP address.
## Requires Bro to be built with ``libgeoip``.
##
## a: The IP address to lookup.
##
## Returns: A record with country, region, city, latitude, and longitude.
##
## .. bro:see:: lookup_asn
function lookup_location%(a: addr%) : geo_location
	%{
	RecordVal* location = new RecordVal(geo_location);

	static bool geoip_initialized = false;
	static GeoIP* geoip = 0;
	static GeoIP* geoip_v6 = 0;
	static bool have_city_db = false;
	static bool have_cityv6_db = false;
	GeoIPRecord* gir = 0;
	const char* cc = 0;

	if ( ! geoip_initialized )
		{
		geoip_initialized = true;
		geoip = open_geoip_city_db();

		if ( ! geoip )
			{
			geoip = open_geoip_db(GEOIP_COUNTRY_EDITION);
			string db_path = GeoIPDBFileName[GEOIP_COUNTRY_EDITION];

			if ( ! geoip )
				builtin_error(fmt("Failed fall back to GeoIP Country "
				                  "database: %s",
				                  GeoIPDBFileName[GEOIP_COUNTRY_EDITION]));
			else
				reporter->Info("Fell back to GeoIP Country database");
			}
		else
			have_city_db = true;

		geoip_v6 = open_geoip_city_db_v6();

		if ( geoip_v6 )
			have_cityv6_db = true;

#ifdef HAVE_GEOIP_COUNTRY_EDITION_V6
		if ( ! geoip_v6 )
			{
			geoip_v6 = open_geoip_db(GEOIP_COUNTRY_EDITION_V6);

			if ( ! geoip_v6 )
				reporter->Info("Failed to open GeoIPv6 Country database: %s",
				               GeoIPDBFileName[GEOIP_COUNTRY_EDITION_V6]);
			}
#endif

		if ( ! geoip_v6 )
			builtin_error("Can't open GeoIPv6 City/Country database");
		}

#ifdef HAVE_GEOIP_COUNTRY_EDITION_V6
	if ( geoip_v6 && a->AsAddr().GetFamily() == IPv6 )
		{
		geoipv6_t ga;
		a->AsAddr().CopyIPv6(&ga);
		if ( have_cityv6_db )
			gir = GeoIP_record_by_ipnum_v6(geoip_v6, ga);
		else
			cc = GeoIP_country_code_by_ipnum_v6(geoip_v6, ga);
		}
	else
#endif

	if ( geoip && a->AsAddr().GetFamily() == IPv4 )
		{
		const uint32* bytes;
		a->AsAddr().GetBytes(&bytes);
		if ( have_city_db )
			gir = GeoIP_record_by_ipnum(geoip, ntohl(*bytes));
		else
			cc = GeoIP_country_code_by_ipnum(geoip, ntohl(*bytes));
		}

	if ( gir )
		{
		if ( gir->country_code )
			location->Assign(0, new StringVal(gir->country_code));

		if ( gir->region )
			location->Assign(1, new StringVal(gir->region));

		if ( gir->city )
			location->Assign(2, new StringVal(gir->city));

		if ( gir->latitude )
			location->Assign(3, new Val(gir->latitude,
							TYPE_DOUBLE));

		if ( gir->longitude )
			location->Assign(4, new Val(gir->longitude,
						TYPE_DOUBLE));

		GeoIPRecord_delete(gir);

		return location;
		}

	else if ( cc )
		{
		location->Assign(0, new StringVal(cc));
		return location;
		}

	// We can get here even if we have GeoIP support if we weren't
	// able to initialize it or it didn't return any information for
	// the address.

	return location;
	%}

## Performs an AS lookup of an IP address.
## Requires Bro to be built with ``libgeoip``.
##
## a: The IP address to lookup.
##
## Returns: The number of the AS that contains *a*.
##
## .. bro:see:: lookup_location
function lookup_asn%(a: addr%) : count
	%{
	static GeoIP* geoip_asn = 0;
	static bool geoip_asn_initialized = false;
	char* gir = 0;

	if ( ! geoip_asn_initialized )
		{
		geoip_asn_initialized = true;
		geoip_asn = open_geoip_db(GEOIP_ASNUM_EDITION);

		if ( ! geoip_asn )
			builtin_error(fmt("Can't open GeoIP ASNUM database: %s",
			                  GeoIPDBFileName[GEOIP_ASNUM_EDITION]));
		}

	if ( geoip_asn )
		{
// IPv6 support showed up in 1.4.5.
#ifdef HAVE_GEOIP_COUNTRY_EDITION_V6
		if ( a->AsAddr().GetFamily() == IPv6 )
			{
			geoipv6_t ga;
			a->AsAddr().CopyIPv6(&ga);
			gir = GeoIP_name_by_ipnum_v6(geoip_asn, ga);
			}
		else
#endif

		if ( a->AsAddr().GetFamily() == IPv4 )
			{
			const uint32* bytes;
			a->AsAddr().GetBytes(&bytes);
			gir = GeoIP_name_by_ipnum(geoip_asn, ntohl(*bytes));
			}
		}

	if ( gir )
		{
		// Move the pointer +2 so we don't return
		// the first two characters: "AS".
		return new Val(atoi(gir+2), TYPE_COUNT);
		}

	// We can get here even if we have GeoIP support, if we weren't
	// able to initialize it or it didn't return any information for
	// the address.
	return new Val(0, TYPE_COUNT);
	%}

